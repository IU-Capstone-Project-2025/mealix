from typing import Dict, Any

from fastapi import FastAPI, HTTPException  # type: ignore
from pydantic import BaseModel  # type: ignore
import traceback

from app.services import (
    dish_selector,
    rag_search,
    menu_builder,
    product_matcher,
)

print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAGSearch...")
rag_engine = rag_search.RAGSearch()
print("‚úÖ RAGSearch –≥–æ—Ç–æ–≤")

app = FastAPI(
    title="Mealix diet API",
    version="0.1.0",
    docs_url="/docs",
    redoc_url=None,
)

class MenuRequest(BaseModel):
    allergies: str = ""
    general_prefs: str = ""
    today_prefs: str = ""

@app.post("/menu")
def generate_menu(payload: MenuRequest) -> Dict[str, Any]:
    try:
        print("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:")
        print(f"   allergies:      {payload.allergies}")
        print(f"   general_prefs:  {payload.general_prefs}")
        print(f"   today_prefs:    {payload.today_prefs}")

        dishes = dish_selector.select_dishes(
            allergies=payload.allergies,
            general_prefs=payload.general_prefs,
            today_prefs=payload.today_prefs,
        )
        print("üçΩ –í—ã–±—Ä–∞–Ω—ã –±–ª—é–¥–∞:", dishes)

        print("üîß –°—Ç—Ä–æ–∏–º –º–µ–Ω—é —á–µ—Ä–µ–∑ build_menu...")
        menu = menu_builder.build_menu(dishes, rag_engine)
        print("‚úÖ –ú–µ–Ω—é –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ:", menu)

        print("üß© –û–±–æ–≥–∞—â–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ enrich_products...")
        enriched_menu = product_matcher.enrich_products(menu)
        print("‚úÖ –ú–µ–Ω—é –æ–±–æ–≥–∞—â–µ–Ω–æ:", enriched_menu)

        return enriched_menu

    except Exception as exc:
        print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(exc))
