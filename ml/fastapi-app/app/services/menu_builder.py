from __future__ import annotations
import json
import re
from typing import Any, Dict, List

from app.clients.yandex_gpt import call_gpt
from app.services.rag_search import RAGSearch

_SYSTEM = "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥."
_JSON_ARR_RE = re.compile(r"\[.*\]", re.S)
_MEAL_RE = re.compile(r"(breakfast|lunch|dinner)", re.I)


def _extract_json_arr(text: str) -> List[Any]:
    m = _JSON_ARR_RE.search(text)
    if not m:
        raise ValueError("JSON array not found in LLM response")
    return json.loads(m.group(0))


def _call(prompt: str, *, max_tokens: int = 400) -> str:
    return call_gpt(system_prompt=_SYSTEM, user_prompt=prompt, max_tokens=max_tokens)


def _safe_extract_json_arr(prompt: str, max_tokens: int = 400, retries: int = 2) -> List[Any]:
    for attempt in range(retries):
        try:
            raw = _call(prompt, max_tokens=max_tokens)
            return _extract_json_arr(raw)
        except Exception as e:
            print(f"[‚ö†Ô∏è LLM Error] –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{retries} ‚Äî {e}")
            continue
    return []  # fallback


def _determine_meal_type(dish: str, recipe: Dict[str, Any] | None) -> str:
    ctx = f"(—Ä–µ—Ü–µ–ø—Ç —á–∞—Å—Ç–∏—á–Ω–æ: {json.dumps(recipe, ensure_ascii=False)[:200]} ‚Ä¶)" if recipe else ""
    raw = _call(
        f"–î–ª—è –±–ª—é–¥–∞ ¬´{dish}¬ª {ctx} –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏: breakfast, lunch –∏–ª–∏ dinner.\n"
        "–û—Ç–≤–µ—Ç–∏ **–æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º** –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.",
        max_tokens=10,
    )
    m = _MEAL_RE.search(raw)
    return (m.group(1).lower() if m else "lunch")


def _determine_ingredients(dish: str, recipe: Dict[str, Any] | None) -> List[Dict[str, Any]]:
    ctx = f"–í–æ—Ç —Ä–µ—Ü–µ–ø—Ç: {json.dumps(recipe, ensure_ascii=False)}" if recipe else ""
    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –±–ª—é–¥–∞ ¬´{dish}¬ª. {ctx}\n"
        "–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON-–º–∞—Å—Å–∏–≤: "
        '[{"name": "‚Ä¶", "amount": <—á–∏—Å–ª–æ>, "unit": "g|ml|pcs"}]'
    )
    return _safe_extract_json_arr(prompt)


def _determine_steps(dish: str, recipe: Dict[str, Any] | None) -> List[str]:
    ctx = f"–ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ—Ü–µ–ø—Ç: {json.dumps(recipe, ensure_ascii=False)}" if recipe else ""
    prompt = (
        f"–û–ø–∏—à–∏ —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ ¬´{dish}¬ª. {ctx}\n"
        '–í–µ—Ä–Ω–∏ JSON-–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä ["–®–∞–≥ 1", "–®–∞–≥ 2"].'
    )
    return _safe_extract_json_arr(prompt)


def build_menu(dishes: List[str], rag: RAGSearch) -> Dict[str, Any]:
    meals: List[Dict[str, Any]] = []

    for dish in dishes:
        print(f"üîç RAG-–ø–æ–∏—Å–∫ –¥–ª—è: {dish}")
        recipe = rag.find(dish)

        meal = {
            "type": _determine_meal_type(dish, recipe),
            "dish": dish,
            "ingredients": _determine_ingredients(dish, recipe),
            "steps": _determine_steps(dish, recipe),
        }
        meals.append(meal)

    return {"meals": meals}
